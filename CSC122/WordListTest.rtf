{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red63\green95\blue191;\red127\green0\blue85;\red63\green127\blue95;
\red100\green100\blue100;\red106\green62\blue62;\red42\green0\blue255;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf2 /**\cf0 \
\cf2  * File:	WordListTest.java\cf0 \
\cf2  * Author:	\ul Brady\ulnone  \ul Coye\cf0 \ulnone \
\cf2  * Description:	tests the WordList functionality \cf0 \
\cf2  * 3/4/15\cf0 \
\cf2  */\cf0 \
\pard\pardeftab720
\cf3 import\cf0  \cf3 static\cf0  org.junit.Assert.*;\
\cf3 import\cf0  org.junit.Test;\
\
\pard\pardeftab720
\cf4 /*\cf0 \
\cf4  * each case tests the functionality of \ul wordlist\ulnone  with the format: test(method name)\cf0 \
\cf4  */\cf0 \
\pard\pardeftab720
\cf3 public\cf0  \cf3 class\cf0  WordListTest \{\
\
	\cf5 @Test\cf0 \
	\cf3 public\cf0  \cf3 void\cf0  testCount() \{\
		WordList \cf6 wL\cf0  = \cf3 new\cf0  WordList();\
		\cf6 wL\cf0 .add(\cf7 "Butter"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Banana"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Peanut"\cf0 );\
		assertTrue(\cf6 wL\cf0 .count() == 3);\
	\}\
	\
	\cf5 @Test\cf0 \
	\cf3 public\cf0  \cf3 void\cf0  testGetWordAtPosition() \{\
		WordList \cf6 wL\cf0  = \cf3 new\cf0  WordList();\
		\cf6 wL\cf0 .add(\cf7 "Butter"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Banana"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Peanut"\cf0 );\
		assertTrue(\cf6 wL\cf0 .getWordAtPosition(0) == \cf7 "Butter"\cf0 );\
	\}\
	\
	\cf5 @Test\cf0 \
	\cf3 public\cf0  \cf3 void\cf0  testIndexOf() \{\
		WordList \cf6 wL\cf0  = \cf3 new\cf0  WordList();\
		\cf6 wL\cf0 .add(\cf7 "Butter"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Banana"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Peanut"\cf0 );\
		assertTrue(\cf6 wL\cf0 .indexOf(\cf7 "Banana"\cf0 ) == 1);\
	\}\
	\
	\cf5 @Test\cf0 \
	\cf3 public\cf0  \cf3 void\cf0  testToString() \{\
		WordList \cf6 wL\cf0  = \cf3 new\cf0  WordList();\
		\cf6 wL\cf0 .add(\cf7 "Butter"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Banana"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Peanut"\cf0 );\
		assertTrue(\cf6 wL\cf0 .toString() == \cf7 "Butter Banana Peanut"\cf0 );\
	\}\
	\
	\cf4 /*\cf0 \
\pard\pardeftab720
\cf4 	 * tests the wordlist's ability to expand when full\cf0 \
\cf4 	 */\cf0 \
	\cf5 @Test\cf0 \
	\cf3 public\cf0  \cf3 void\cf0  testWordListCapacity() \{\
		WordList \cf6 wL\cf0  = \cf3 new\cf0  WordList();\
		\cf3 for\cf0  (\cf3 int\cf0  \cf6 i\cf0 =0; \cf6 i\cf0  > 15; \cf6 i\cf0 ++)\{\
		\cf6 wL\cf0 .add(\cf7 "Butter"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Banana"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Peanut"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Apple"\cf0 );\
		\cf6 wL\cf0 .add(\cf7 "Pair"\cf0 );\
		\}\
		assertTrue(\cf6 wL\cf0 .count() == 75);\
		assertTrue(\cf6 wL\cf0 .getWordAtPosition(74) == \cf7 "Pair"\cf0 );\
	\}\
\
\}\
}