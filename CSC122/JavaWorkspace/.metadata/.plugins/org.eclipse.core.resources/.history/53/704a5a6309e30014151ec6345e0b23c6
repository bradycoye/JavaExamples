import java.awt.Color;
import java.awt.GridLayout;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * File:	WaterFlow.java
 * Author:	Brady Coye
 * Description:	takes elevation from text file and determines if water can flow
 * 3/30/2015
 */

public class WaterFlow{
	private int [][] elevation, colorInfo;
	private int row, column;
	private Queue<Coordinate> queue;
	private Coordinate currentPos;
	private Boolean onEdge;
	private JPanel[][] elePanel;

	/*
	 * opens file and sorts data into array
	 */
	public WaterFlow (File data) {
		Scanner fileIn = null;
		try {
			fileIn = new Scanner(data);
		} catch (FileNotFoundException e) {
			System.out.println("File: " + " is not found");
			System.exit(0);
		}
		row = fileIn.nextInt();
		column = fileIn.nextInt();
		elevation = new int [row][column];
		while( fileIn.hasNextInt() )  {
			for (int i=0; i < row; i++) {
				for (int j=0; j < column; j++) {
					elevation[i][j] = fileIn.nextInt();
				}
			}
		}
		fileIn.close();
		//System.out.println(Arrays.deepToString(elevation));

		int max = elevation[0][0];
		int min = elevation[0][0];
		for (int i=0; i < row; i++) {
			for (int j=0; j < column; j++) {
				if (elevation [i][j] > max) {
					max = elevation[i][j];
				}
				if (elevation [i][j] < min) {
					min = elevation[i][j];
				}
			}
		}

		//makes new array with normalized values (shades of green)
		colorInfo = new int [row][column];
		for (int i=0; i < row; i++) {
			for (int j=0; j < column; j++)
				colorInfo[i][j] = greenValue(elevation[i][j], max, min);
		}
	}


	public int greenValue (int val, int max, int min) {
		double range = max-min;
		double percent = val/range;
		double color = percent * 150 + 100;
		int value = (int)color;
		return value;
	}

	/*
	 * checks each coordinate one away on all sides, adds to queue if the move is possible
	 */
	private void addOptionsFrom (Coordinate c) {
		Coordinate n = new Coordinate(c.x, c.y -1);
		Coordinate s = new Coordinate(c.x, c.y +1);
		Coordinate e = new Coordinate(c.x +1, c.y);
		Coordinate w = new Coordinate(c.x -1, c.y);

		if (canMoveTo(n)) {
			queue.enqueue(n);
		}
		if (canMoveTo(s)){
			queue.enqueue(s);
		}
		if (canMoveTo(e)){
			queue.enqueue(e);
		}
		if (canMoveTo(w)){
			queue.enqueue(w);
		}
	}

	/*
	 * returns if the water at the given coordinate can travel to the edge by a lower elevation path
	 */
	public boolean canFlowOffMap (Coordinate drop) throws Exception{
		currentPos = drop;
		queue = new Queue<Coordinate>();
		queue.enqueue(currentPos);
		queue.enqueue(currentPos);
		drawGrid();

		if (onEdge(currentPos)){
			return onEdge;
		}

		while( hasMoreChoices() && !(onEdge(currentPos))) {
			currentPos = queue.dequeue();
			updateColor(currentPos);
			Thread.sleep(500);
			addOptionsFrom(currentPos);
		}

		if (onEdge(currentPos)) {
			return onEdge;
		}
		else {
			return false;
		}
	}

	/*
	 * checks if the given coordinate is on the edge
	 */
	public boolean onEdge (Coordinate c) {
		if (c.x == 0 || c.y == 0 || (c.x == row -1) || (c.y == column - 1)) {
			onEdge = true;
			return true;
		}
		return false;
	}

	/*
	 * checks if there are more choices/more direction choices from the queue
	 */
	public boolean hasMoreChoices()
	{
		return (queue.count() > 0); 
	}

	/*
	 * checks if the water can move to the given coordinate by elevation
	 */
	public boolean canMoveTo (Coordinate c) {
		if (c.x < 0 || c.y < 0){
			return false;
		} 
		if (c.x > column -1 || c.y > row -1){
			return false;
		}
		if (elevation[currentPos.y][currentPos.x] > elevation[c.y][c.x]){
			return true;
		} else {
			return false;
		}
	}

	/*
	 * makes visual representation of grid and water animation
	 */
	public void drawGrid () {
		JFrame frame = new JFrame();
		frame.setSize(500, 500);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		GridLayout layout = new GridLayout(row,column,3,3);
		JPanel colors = new JPanel();
		colors.setLayout(layout);

		elePanel = new JPanel[row][column];

		for (int i=0; i < row; i++) {
			for (int j=0; j < column; j++) {
				int eleValue = elevation[i][j];
				int colorValue = colorInfo[i][j];
				String value = eleValue + "";
				elePanel[i][j] = new JPanel();
				elePanel[i][j].add(new JLabel(value));
				elePanel[i][j].setBackground(new Color(0, colorValue, 0));
				elePanel[i][j].setSize(25, 25);
				elePanel[i][j].setVisible(true);
				colors.add(elePanel[i][j]);
			}
		}
		frame.add(colors);
		frame.setVisible(true);
	}

	public void updateColor(Coordinate c) {
		elePanel[c.y][c.x].setBackground(Color.BLUE);
	}

	/*
	 * main method only runs the program so that this class is expandable
	 */
	public static void main(String[] args) throws Exception {

		Scanner startInput = new Scanner(System.in);
		System.out.print("Enter the file name: "+ "\n");
		String fname = startInput.nextLine();
		File data = new File("waterFlowSample.txt");
		WaterFlow n = new WaterFlow(data);

		System.out.println("Enter the start column: ");
		int posX = startInput.nextInt();
		System.out.println("Enter the start row: ");
		int posY = startInput.nextInt();

		Coordinate start = new Coordinate(posX,posY);

		if (n.canFlowOffMap(start)) {
			System.out.print("Yeah!");
		} else {
			System.out.print("No....");
		}


	}
}
