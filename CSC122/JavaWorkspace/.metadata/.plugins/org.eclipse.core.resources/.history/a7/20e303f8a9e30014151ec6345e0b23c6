import java.awt.Color;
import java.awt.GridLayout;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * File: WaterFlow.java Author: Brady Coye Description: Takes an elevation grid
 * from a text file and normalizes each value to a shade of green. User enters a
 * start position for the water represented by blue, then program shows
 * animation for where water can flow. 4/14/2015
 */

public class WaterFlow {
	private double [][] elevation;
	private int [][] colorInfo;
	private int row, column;
	private Queue<Coordinate> queue;
	private Coordinate currentPos;
	private Boolean onEdge;
	private JPanel[][] elePanel;
	private static final int COLOR_RANGE = 150;
	private static final int COLOR_MIN = 100;
	private static final int PANEL_SIZE = 500;

	/*
	 * opens file, sorts data into array, and creates separate array for color
	 * values
	 */
	public WaterFlow(File data) {
		Scanner fileIn = null;
		try {
			fileIn = new Scanner(data);
		} catch (FileNotFoundException e) {
			System.out.println("File: " + " is not found");
			System.exit(0);
		}
		row = fileIn.nextInt();
		column = fileIn.nextInt();
		elevation = new double[row][column];
		while (fileIn.hasNext()) {
			double eValue = fileIn.nextDouble();
			int yPos = fileIn.nextInt();
			int xPos = fileIn.nextInt();
			elevation[yPos][xPos] = eValue;	
			}
		
		fileIn.close();
		System.out.println(Arrays.deepToString(elevation));

		// finds the max and min value in the elevation array so values can be
		// normalized into shades of green
		double max = elevation[0][0];
		double min = elevation[0][0];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < column; j++) {
				if (elevation[i][j] > max) {
					max = elevation[i][j];
				}
				if (elevation[i][j] < min) {
					min = elevation[i][j];
				}
			}
		}

		// makes new array with normalized values (shades of green)
		colorInfo = new int[row][column];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < column; j++)
				colorInfo[i][j] = greenValue(elevation[i][j], max, min);
		}
	}

	/*
	 * takes the value to be adjusted, the max, and the min as parameters then
	 * returns the normalized value within the range 100-250
	 */
	public int greenValue(double val, double max, double min) {
		if (max - min == 0) {
			return COLOR_MIN;
		}
		double elevationRange = max - min;
		double adjusted = (val - min) / elevationRange;
		double color = adjusted * COLOR_RANGE + COLOR_MIN;
		int value = (int) color; // changes double to int so java.Color will
									// accept
		return value;
	}

	/*
	 * checks each coordinate one away on all sides, adds to queue if the move
	 * is possible
	 */
	private void addOptionsFrom(Coordinate c) {
		Coordinate n = new Coordinate(c.x, c.y - 1);
		Coordinate s = new Coordinate(c.x, c.y + 1);
		Coordinate e = new Coordinate(c.x + 1, c.y);
		Coordinate w = new Coordinate(c.x - 1, c.y);

		if (canMoveTo(n)) {
			queue.enqueue(n);
		}
		if (canMoveTo(s)) {
			queue.enqueue(s);
		}
		if (canMoveTo(e)) {
			queue.enqueue(e);
		}
		if (canMoveTo(w)) {
			queue.enqueue(w);
		}
	}

	/*
	 * returns if the water at the given coordinate can travel to the edge by a
	 * lower elevation path
	 */
	public boolean canFlowOffMap(Coordinate drop) throws Exception {
		currentPos = drop;
		queue = new Queue<Coordinate>();
		queue.enqueue(currentPos);
		this.drawGrid();

		if (onEdge(currentPos)) {
			return onEdge;
		}

		while (hasMoreChoices() && !(onEdge(currentPos))) {
			currentPos = queue.dequeue();
			updateColor(currentPos);
			Thread.sleep(100);
			addOptionsFrom(currentPos);
		}

		if (onEdge(currentPos)) {
			return onEdge;
		} else {
			return false;
		}
	}

	/*
	 * checks if the given coordinate is on the edge
	 */
	public boolean onEdge(Coordinate c) {
		if (c.x == 0 || c.y == 0 || (c.x == row - 1) || (c.y == column - 1)) {
			onEdge = true;
			return true;
		}
		return false;
	}

	/*
	 * checks if there are more choices/more direction choices from the queue
	 */
	public boolean hasMoreChoices() {
		return (queue.count() > 0);
	}

	/*
	 * checks if the water can move to the given coordinate by elevation
	 */
	public boolean canMoveTo(Coordinate c) {
		if (c.x < 0 || c.y < 0) {
			return false;
		}
		if (c.x > column - 1 || c.y > row - 1) {
			return false;
		}
		if (elevation[currentPos.y][currentPos.x] > elevation[c.y][c.x]) {
			return true;
		} else {
			return false;
		}
	}

	/*
	 * makes visual representation of grid and water animation
	 */
	public void drawGrid() {
		JFrame frame = new JFrame();
		frame.setSize(PANEL_SIZE, PANEL_SIZE);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		GridLayout layout = new GridLayout(row, column);
		JPanel colors = new JPanel();
		colors.setLayout(layout);
		colors.setSize(PANEL_SIZE, PANEL_SIZE);

		elePanel = new JPanel[row][column];

		for (int i = 0; i < row; i++) {
			for (int j = 0; j < column; j++) {
				int colorValue = colorInfo[i][j];
				elePanel[i][j] = new JPanel();
				// int eleValue = elevation[i][j];
				// String value = eleValue + ""; // uncomment for elevation
				// labels on each panel
				// elePanel[i][j].add(new JLabel(value));
				elePanel[i][j].setBackground(new Color(0, colorValue, 0));
				elePanel[i][j].setSize(PANEL_SIZE / row, PANEL_SIZE / column);
				elePanel[i][j].setVisible(true);
				colors.add(elePanel[i][j]);
			}
		}
		frame.add(colors);
		frame.setVisible(true);
	}

	/*
	 * sets a given position blue to represent water
	 */
	public void updateColor(Coordinate c) {
		elePanel[c.y][c.x].setBackground(Color.BLUE);
	}

	/*
	 * main method only runs the program so that this class is expandable
	 */
	public static void main(String[] args) throws Exception {
		System.out.println("Enter the file name: ");
		Scanner startInput = new Scanner(System.in);
		String fname = startInput.nextLine();
		File data = new File(fname);
		WaterFlow n = new WaterFlow(data);
		System.out.println("Enter the start row: ");
		int posY = startInput.nextInt();
		System.out.println("Enter the start column: ");
		int posX = startInput.nextInt();
		Coordinate start = new Coordinate(posX, posY);

		if (n.canFlowOffMap(start)) {
			System.out.print("Yeah! The water flows off the map!");
		} else {
			System.out.print("Bummer... The water could not flow off the map.");
		}
	}
}
